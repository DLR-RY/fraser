// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_EVENT_EVENT_H_
#define FLATBUFFERS_GENERATED_EVENT_EVENT_H_

#include "flatbuffers/flatbuffers.h"
#include "flatbuffers/flexbuffers.h"

namespace event {

struct Event;
struct EventT;

enum Priority {
  Priority_NORMAL_PRIORITY = 0,
  Priority_HIGH_PRIORITY = 1,
  Priority_MIN = Priority_NORMAL_PRIORITY,
  Priority_MAX = Priority_HIGH_PRIORITY
};

inline const Priority (&EnumValuesPriority())[2] {
  static const Priority values[] = {
    Priority_NORMAL_PRIORITY,
    Priority_HIGH_PRIORITY
  };
  return values;
}

inline const char * const *EnumNamesPriority() {
  static const char * const names[] = {
    "NORMAL_PRIORITY",
    "HIGH_PRIORITY",
    nullptr
  };
  return names;
}

inline const char *EnumNamePriority(Priority e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesPriority()[index];
}

struct EventT : public flatbuffers::NativeTable {
  typedef Event TableType;
  std::string name;
  uint64_t timestamp;
  Priority priority;
  uint32_t repeat;
  uint32_t period;
  std::vector<uint8_t> event_data;
  EventT()
      : timestamp(-1),
        priority(Priority_NORMAL_PRIORITY),
        repeat(0),
        period(0) {
  }
};

struct Event FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef EventT NativeTableType;
  enum {
    VT_NAME = 4,
    VT_TIMESTAMP = 6,
    VT_PRIORITY = 8,
    VT_REPEAT = 10,
    VT_PERIOD = 12,
    VT_EVENT_DATA = 14
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  flatbuffers::String *mutable_name() {
    return GetPointer<flatbuffers::String *>(VT_NAME);
  }
  bool KeyCompareLessThan(const Event *o) const {
    return *name() < *o->name();
  }
  int KeyCompareWithValue(const char *val) const {
    return strcmp(name()->c_str(), val);
  }
  uint64_t timestamp() const {
    return GetField<uint64_t>(VT_TIMESTAMP, -1);
  }
  bool mutate_timestamp(uint64_t _timestamp) {
    return SetField<uint64_t>(VT_TIMESTAMP, _timestamp, -1);
  }
  Priority priority() const {
    return static_cast<Priority>(GetField<int32_t>(VT_PRIORITY, 0));
  }
  bool mutate_priority(Priority _priority) {
    return SetField<int32_t>(VT_PRIORITY, static_cast<int32_t>(_priority), 0);
  }
  uint32_t repeat() const {
    return GetField<uint32_t>(VT_REPEAT, 0);
  }
  bool mutate_repeat(uint32_t _repeat) {
    return SetField<uint32_t>(VT_REPEAT, _repeat, 0);
  }
  uint32_t period() const {
    return GetField<uint32_t>(VT_PERIOD, 0);
  }
  bool mutate_period(uint32_t _period) {
    return SetField<uint32_t>(VT_PERIOD, _period, 0);
  }
  const flatbuffers::Vector<uint8_t> *event_data() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_EVENT_DATA);
  }
  flatbuffers::Vector<uint8_t> *mutable_event_data() {
    return GetPointer<flatbuffers::Vector<uint8_t> *>(VT_EVENT_DATA);
  }
  flexbuffers::Reference event_data_flexbuffer_root() const {
    auto v = event_data();
    return flexbuffers::GetRoot(v->Data(), v->size());
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyField<uint64_t>(verifier, VT_TIMESTAMP) &&
           VerifyField<int32_t>(verifier, VT_PRIORITY) &&
           VerifyField<uint32_t>(verifier, VT_REPEAT) &&
           VerifyField<uint32_t>(verifier, VT_PERIOD) &&
           VerifyOffset(verifier, VT_EVENT_DATA) &&
           verifier.Verify(event_data()) &&
           verifier.EndTable();
  }
  EventT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(EventT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Event> Pack(flatbuffers::FlatBufferBuilder &_fbb, const EventT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct EventBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Event::VT_NAME, name);
  }
  void add_timestamp(uint64_t timestamp) {
    fbb_.AddElement<uint64_t>(Event::VT_TIMESTAMP, timestamp, -1);
  }
  void add_priority(Priority priority) {
    fbb_.AddElement<int32_t>(Event::VT_PRIORITY, static_cast<int32_t>(priority), 0);
  }
  void add_repeat(uint32_t repeat) {
    fbb_.AddElement<uint32_t>(Event::VT_REPEAT, repeat, 0);
  }
  void add_period(uint32_t period) {
    fbb_.AddElement<uint32_t>(Event::VT_PERIOD, period, 0);
  }
  void add_event_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> event_data) {
    fbb_.AddOffset(Event::VT_EVENT_DATA, event_data);
  }
  explicit EventBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  EventBuilder &operator=(const EventBuilder &);
  flatbuffers::Offset<Event> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Event>(end);
    fbb_.Required(o, Event::VT_NAME);
    return o;
  }
};

inline flatbuffers::Offset<Event> CreateEvent(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    uint64_t timestamp = -1,
    Priority priority = Priority_NORMAL_PRIORITY,
    uint32_t repeat = 0,
    uint32_t period = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> event_data = 0) {
  EventBuilder builder_(_fbb);
  builder_.add_timestamp(timestamp);
  builder_.add_event_data(event_data);
  builder_.add_period(period);
  builder_.add_repeat(repeat);
  builder_.add_priority(priority);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<Event> CreateEventDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    uint64_t timestamp = -1,
    Priority priority = Priority_NORMAL_PRIORITY,
    uint32_t repeat = 0,
    uint32_t period = 0,
    const std::vector<uint8_t> *event_data = nullptr) {
  return event::CreateEvent(
      _fbb,
      name ? _fbb.CreateString(name) : 0,
      timestamp,
      priority,
      repeat,
      period,
      event_data ? _fbb.CreateVector<uint8_t>(*event_data) : 0);
}

flatbuffers::Offset<Event> CreateEvent(flatbuffers::FlatBufferBuilder &_fbb, const EventT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline EventT *Event::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new EventT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void Event::UnPackTo(EventT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = name(); if (_e) _o->name = _e->str(); };
  { auto _e = timestamp(); _o->timestamp = _e; };
  { auto _e = priority(); _o->priority = _e; };
  { auto _e = repeat(); _o->repeat = _e; };
  { auto _e = period(); _o->period = _e; };
  { auto _e = event_data(); if (_e) { _o->event_data.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->event_data[_i] = _e->Get(_i); } } };
}

inline flatbuffers::Offset<Event> Event::Pack(flatbuffers::FlatBufferBuilder &_fbb, const EventT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateEvent(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Event> CreateEvent(flatbuffers::FlatBufferBuilder &_fbb, const EventT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const EventT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _name = _fbb.CreateString(_o->name);
  auto _timestamp = _o->timestamp;
  auto _priority = _o->priority;
  auto _repeat = _o->repeat;
  auto _period = _o->period;
  auto _event_data = _o->event_data.size() ? _fbb.CreateVector(_o->event_data) : 0;
  return event::CreateEvent(
      _fbb,
      _name,
      _timestamp,
      _priority,
      _repeat,
      _period,
      _event_data);
}

inline const event::Event *GetEvent(const void *buf) {
  return flatbuffers::GetRoot<event::Event>(buf);
}

inline const event::Event *GetSizePrefixedEvent(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<event::Event>(buf);
}

inline Event *GetMutableEvent(void *buf) {
  return flatbuffers::GetMutableRoot<Event>(buf);
}

inline bool VerifyEventBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<event::Event>(nullptr);
}

inline bool VerifySizePrefixedEventBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<event::Event>(nullptr);
}

inline void FinishEventBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<event::Event> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedEventBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<event::Event> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<EventT> UnPackEvent(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<EventT>(GetEvent(buf)->UnPack(res));
}

}  // namespace event

#endif  // FLATBUFFERS_GENERATED_EVENT_EVENT_H_
